// Mocks generated by Mockito 5.4.4 from annotations
// in cinemapedia/test/data/repositories/local_storage_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:cinemapedia/domain/datasources/local_storage_datasource.dart'
    as _i2;
import 'package:cinemapedia/domain/entities/movie.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [LocalStorageDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalStorageDatasource extends _i1.Mock
    implements _i2.LocalStorageDatasource {
  @override
  _i3.Future<void> toggleFavorite(_i4.Movie? movie) => (super.noSuchMethod(
        Invocation.method(
          #toggleFavorite,
          [movie],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<bool> isMovieFavorite(int? movieId) => (super.noSuchMethod(
        Invocation.method(
          #isMovieFavorite,
          [movieId],
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<List<_i4.Movie>> loadMovies({
    int? limit = 10,
    dynamic offset = 0,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadMovies,
          [],
          {
            #limit: limit,
            #offset: offset,
          },
        ),
        returnValue: _i3.Future<List<_i4.Movie>>.value(<_i4.Movie>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i4.Movie>>.value(<_i4.Movie>[]),
      ) as _i3.Future<List<_i4.Movie>>);
}
